/* eslint-disable no-console */

const gulp = require("gulp");
const plugins = require("gulp-load-plugins")();
const del = require("del");

const files = {
  html: "src/**/*.html",
  js: ["src/**/*.js", "!src/**/lib/**"],
  css: "src/**/*.css",
  static: ["src/**/lib/**", "src/**/*.png"],
  build: "dist"
};

gulp.task("default", ["build", "watch"]);

gulp.task("build", ["clean"], () =>
  gulp.start(["build:html", "build:js", "build:css", "build:static"])
);

gulp.task("clean", () => del([`${files.build}/*`]));

gulp.task("build:html", () =>
  gulp
    .src(files.html)
    .pipe(
      plugins.htmlmin({
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        includeAutoGeneratedTags: false,
        minifyCSS: true,
        minifyJS: true,
        processConditionalComments: true,
        removeComments: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        useShortDoctype: true
      })
    )
    .pipe(gulp.dest(files.build))
    .on("error", console.error)
);

gulp.task("build:js", () =>
  gulp
    .src(files.js)
    .pipe(
      plugins.babel({
        presets: ["@babel/env"]
      })
    )
    .pipe(
      plugins.uglify({
        output: {
          ascii_only: true
        }
      })
    )
    .pipe(gulp.dest(files.build))
    .on("error", console.error)
);

gulp.task("build:css", () =>
  gulp
    .src(files.css)
    .pipe(plugins.plumber())
    .pipe(plugins.cssmin())
    .pipe(gulp.dest(files.build))
    .on("error", console.error)
);

gulp.task("build:static", () =>
  gulp
    .src(files.static)
    .pipe(gulp.dest(files.build))
    .on("error", console.error)
);

gulp.task("watch", () => {
  gulp.watch(files.html, ["build:html"]);
  gulp.watch(files.js, ["build:js"]);
  gulp.watch(files.css, ["build:css"]);
  gulp.watch(files.static, ["build:static"]);
});
